/* A tool for collecting, visualizing and annotating 3D Interaction data
 *
 * Copyright (C) 2017-2019 University of Illinois at Chicago
 *
 * Author: Harish G. Naik <hnaik2@uic.edu>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package ipme.scene;

message Position {
    double x = 1;
    double y = 2;
    double z = 3;
}

message Vector_3d {
    double x = 1;
    double y = 2;
    double z = 3;
};

message Quaternion {
    double w = 1;
    double x = 2;
    double y = 3;
    double z = 4;
}

message Size_2d {
    double width = 1;
    double height = 2;
}

message Pose {
    Position position = 1;
    Quaternion orientation = 2;
}

// This message represents single sensor point that has a position and a
// rotation. If there is a person on the scene with multiple sensors, this
// object represents one such sensor
message Object {
    uint32 object_id = 1;
    string name = 2;

    // This timestamp usually comes from the sensor
    uint64 timestamp = 3;

    Pose pose = 4;
}

message Screen_object {
    string screen_object_id = 1;
    string screen_id = 2;
    Position position = 3;
    Size_2d size = 4;
}

message Vrpn_object {
    uint32 vrpn_source_id = 1;
    uint64 timestamp = 2;
    uint32 device_tag = 3;
    uint32 service_type = 4;
    uint32 type = 5;
    uint32 flags = 6;

    Pose pose = 7;
}

message Frame {
    uint32 frame_id = 1;

    // This field is different from the timestamp specified by the sensor but
    // refers to the one that gets assigned at the time of constructing the
    // frame
    uint64 timestamp = 2;

    // We can also represent individual simple objects such as UI elements that
    // don't aggregate into a higher compound object. For eg. a single UI
    // window, or a laptop with a single rigid-body marker
    repeated Object simple_objects = 3;

    repeated Vrpn_object vrpn_objects = 4;

    repeated Screen_object screen_objects = 5;

    // This field takes a label most probably as a result of a human labeler.
    // This would typically mean that the particular formation or a construct
    // has been identified for the frame.
    uint32 label = 6;
}

message Compound_object_config {
    // Name of the compound object. Eg: subject 1
    // This field is read from the configuration file
    string name = 1;
    repeated uint32 object_ids = 2;
}

message Registered_object {
    enum Type {
        HUMAN = 0;
        DEVICE = 1;
    }

    string name = 1;
    uint32 id = 2;
    Type type = 3;
}

message Display {
    string display_id = 1;
    Position offset = 2;
    Size_2d dimensions = 3;
    Vector_3d normal_vector = 4;
}

message Scene_config {
    repeated Display displays = 1;
    repeated Registered_object registered_objects = 2;
}

// Object representing multiple frames with a starting configuration
message Scene {
    Scene_config config = 1;
    repeated Frame frames = 2;
}
